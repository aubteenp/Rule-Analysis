---
title: "Rule Analysis Quarto"
format: html
editor: visual
---

## Quarto

Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see <https://quarto.org>.

## Running Code

```{r}

library(dplyr)

#read csv
df <- read.csv("All CMS Rules from 1_14_2025.csv", stringsAsFactors = FALSE)
#df <- read.csv("FDA Rules.csv", stringsAsFactors = FALSE)

# 2. Convert 'publication_date' to Date format
df <- df |>
  mutate(publication_date = as.Date(publication_date, format = "%m/%d/%Y"), 
         year = format(publication_date, "%Y"),
         month = format(publication_date, "%B")
         )

# View the first few rows to verify
df

```

Now, create plots from df data frame

```{r}
#| code-title: "Grouping Rules by Year"
#| echo: false

library(ggplot2)
library(lubridate)
library(dplyr)
library(tidyr)


#generates table with number of rules per year
rules_per_year <- df |>
  group_by(year) |>
  summarize(count = n()) |>
  arrange(year)


#plot 1 - number of rules per year
ggplot(rules_per_year, 
       aes(x = as.numeric(year), 
           y = count)) +
  geom_line(color = "steelblue", size = 1) +
  geom_point(color = "darkred", size = 2) +
  labs(
    title = "Number of Rules Published Each Year",
    x = "Year",
    y = "Number of Rules"
  ) +
  theme_minimal()

```

Now, let's analyze the data broken into its constituent months

```{r}

#| code-title: "Grouping Rules by month"
#| echo: false


#plot 2 - number of rules published each month within each year

#class(df$year)
# Convert the 'year' var into a numeric value (important for years_seq)
df <- df %>%
  mutate(year = as.numeric(as.character(year)))

# Define the complete sequence of years from the minimum to the maximum year in the dataset
years_seq <- seq(min(df$year), max(df$year), by = 1)

rules_per_month_year <- df |>
  group_by(year, month) |>
  summarise(count = n(), .groups = 'drop') |>
    # Convert 'month' to an ordered factor to ensure correct ordering
  mutate(month = factor(month, levels = month.name, ordered = TRUE)) |>
  # Use 'complete()' to fill in missing year-month combinations
  complete(year = years_seq, month = month.name, fill = list(count = 0)) |>
  arrange(year, match(month, month.name))  # Ensure correct month order

ggplot(rules_per_month_year, aes(x = month, y = count, group = 1)) +
  geom_line(color = "darkgreen", size = 1) +
  geom_point(color = "orange", size = 2) +
  labs(
    title = "Number of Rules Published Each Month Within Each Year",
    x = "Month",
    y = "Number of Rules"
  ) +
  theme_minimal() +
  facet_wrap(~ year, ncol = 2) +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1)
  )

#Monthly Number of Rules Published Over Time
ggplot(rules_per_month_year, aes(x = as.Date(paste(year, month, "01", sep = "-"), format = "%Y-%B-%d"), y = count)) +
  geom_line(color = "steelblue") +
  labs(title = "Monthly Number of Rules Published Over Time",
       x = "Date",
       y = "Number of Rules") +
  theme_minimal()
```

Data Analysis

```{r}
#| code-title: "Cleaning Data for Model"
#| echo: false

#creates data frame with number of rules published in each month of each year
monthly_counts <- df %>%
  group_by(year, month) %>%
  summarise(count = n()) %>%
  ungroup()

#Create seasonal tags
df <- df |>
  mutate(
    quarter = quarter(publication_date)
  )

# Define presidential transition years, and create transition indicator
transition_years <- c(2000, 2008, 2016, 2020, 2024)

df <- df %>%
  mutate(
    transition = ifelse(year %in% transition_years, 1, 0)
  )

monthly_counts <- monthly_counts %>%
  mutate(
    transition = ifelse(year %in% transition_years, 1, 0)
  ) |>
    arrange(year, month) %>% 
  # Create a marker when transition status changes compared to the previous row
  # Without this marker, red lines would connect months in adjacent transition years
  mutate(change = transition != lag(transition, default = first(transition))) %>%
  # Assign a unique group ID for each consecutive segment of identical transition status
  mutate(group = cumsum(change))


ggplot(monthly_counts, aes(x = as.Date(paste(year, month, "01", sep = "-"), format = "%Y-%B-%d"), y = count, color = factor(transition),
                           group = group)) +
  geom_line() +
  labs(title = "Monthly Number of Rules Published with Transition Years Highlighted",
       x = "Date",
       y = "Number of Rules",
       color = "Transition Year") +
  scale_color_manual(values = c("0" = "grey", "1" = "red")) +
  theme_minimal()

```

Regression Discontinuity Analysis

$$
Y_i = \alpha + \tau D_i + \beta X_i + \gamma X_i^2 + \sum_{m=1}^{11} \delta_m M_{im} + \theta T_i + \epsilon_i
$$

Where:

-   ($Y_i$): Number of Rules Published in month ($i$).

-   ($\alpha$): Intercept term (baseline level of ($Y$).

-   ($D_i$): Treatment Indicator for month ($i$). $D_i$ = 1 if month $i$ is after June 2024 and 0 otherwise.

-   ($X_i$): Running Variable representing the distance from the cutoff (June 2024) for month $i$). Measured in months: $X_i$ = Number of months since June 2024

-   ($X_i > 0$): Post-June 2024 (treatment group)

-   ($X_i < 0$): Pre-June 2024 (control group)

-   ($X_i^2$): Quadratic Term to capture potential non-linear trends in the data.

-   ($M_{im}$): Monthly Dummy Variables for each month ( $m$, January to December), excluding one month to avoid multicollinearity (January is the reference category).

-   ($\delta_m$): Coefficients for each monthly dummy variable, capturing the effect of being in month ($m$) relative to the reference month.

-   ($T_i$): Presidential Transition Indicator for month ($T_i$): $T_i$ =1 for 2008, 2016, 2020, or 2024 and 0 otherwise.

-   ($\theta$): Coefficient capturing the effect associated with presidential transition years.

-   ($\epsilon_i$): Error Term capturing unobserved factors affecting ($Y_i$).

```{r}

library(dplyr)
library(lubridate)

# Define cutoff date (June 2024)
cutoff_date <- ymd("2024-06-30")

# Create running variable (distance from cutoff in months)
rules_per_month_year <- rules_per_month_year |>
  mutate(
    publication_date = make_date(year, match(month, month.name), 1),  # First day of the month
    distance = interval(ymd("2001-01-01"), publication_date) / months(1) - 
      (interval(ymd("2001-01-01"), cutoff_date) / months(1)),
    treatment = ifelse(publication_date > cutoff_date, 1, 0)
  )

# Convert month to factor with correct ordering
rules_per_month_year <- rules_per_month_year %>%
  mutate(
    month = factor(month, levels = month.name, ordered = TRUE),
    transition = ifelse(year %in% c(2008, 2016, 2020, 2024), 1, 0)
  )

# Create monthly dummies (excluding January to avoid multicollinearity)
rules_per_month_year <- rules_per_month_year %>%
  mutate(
    month_dummy = factor(month, levels = month.name)
  )

# Fit the RD model using linear regression
rd_model <- lm(count ~ treatment + distance + I(distance^2) + 
                month + transition, data = rules_per_month_year)

# View the summary of the model
summary(rd_model)
```

Now we'll try an ITS model.

```{r}
#install.packages("forecast")
library(forecast)
library(dplyr)
library(lubridate)
# The following variables have already been created:
# - publication_date: Date object representing the first day of each month
# - distance: Numeric (months since cutoff; negative before, positive after)
# - treatment: Binary (1 if post-June 2024, 0 otherwise)
# - month: Ordered factor (January to December)
# - transition: Binary (1 if year is 2008, 2016, 2020, 2024; 0 otherwise)
# - month_dummy: Factor (monthly dummy variables)

# Step 1: Calculate 'Time' and 'TimeAfterIntervention'

min_date <- min(rules_per_month_year$publication_date, na.rm = TRUE)

# Define the start year and month for the time series
start_year <- year(min_date)
start_month <- month(min_date)

rules_per_month_year <- rules_per_month_year |>
  arrange(publication_date) |>  # Ensure data is sorted by date
  mutate(
    Time = ((year(publication_date)) - start_year) * 12 + 
           (month(publication_date) - start_month) + 1,  # +1 to start at 1
    TimeAfterIntervention = ifelse(treatment == 1, Time - min(Time[treatment == 1]) + 1, 0)  # Time since intervention
  )

#Define most recent data
max_date <- max(rules_per_month_year$publication_date, na.rm = TRUE)

# Define the start year and month for the time series
end_year <- year(max_date)
end_month <- month(max_date)
# Convert 'count' to a time series object
ts_rules <- ts(rules_per_month_year$count, start = c(start_year, start_month), c(end_year, end_month), frequency = 12)

ts_rules

# Define external regressors
external_regressors <- cbind(
  Intervention = rules_per_month_year$treatment,
  TimeAfterIntervention = rules_per_month_year$TimeAfterIntervention
)

# Fit the ARIMA model with external regressors
its_model <- auto.arima(ts_rules, xreg = external_regressors, seasonal = TRUE)

# Display the summary
summary(its_model)

```

```{r}

```
